package controller;

import java.io.IOException;
import java.util.Collection;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;

import model.AuthenticationDAO;
import model.AuthenticationHandlerException;
import model.HibernateToDoListDAO;
import model.ToDoListItem;
import model.ToDoListsPlatformException;
import model.User;

/**
 * Servlet implementation class ToDoListController
 */
@WebServlet("/ToDoListController/*")
public class ToDoListController extends HttpServlet {
	private static final long serialVersionUID = 1L;
	//instantiate logger     
	public static Logger logger = Logger.getLogger(ToDoListController.class); 
	//http session var
	private HttpSession session = null;
	private static boolean isLogin = false;

	private Collection<ToDoListItem> items = null;

	/**
	 * @see HttpServlet#HttpServlet()
	 */
	public ToDoListController() {
		super();
		// TODO Auto-generated constructor stub
	}

	/**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		//create new session if not exist 
		this.session = request.getSession(true);
		//user objet ref 
		User currentUser = null;

		//checking which url address the request was equipped with
		StringBuffer sb = request.getRequestURL();
		String url = sb.toString();

		currentUser = (User)this.session.getAttribute("user");
		//check if user id logged in

		if (currentUser == null && isLogin == false){
			logger.info("Redirect to login");
			logout(request, response);
		}
		else {
			//if current user is not null , he is log
			actionPageSelector(request,response,url);
		}
	}

	/**
	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {

		//checking which url address the request was equipped with
		StringBuffer sb = request.getRequestURL();
		String url = sb.toString();
		try{
			//login requset

			if ((userAuthentication(request, response) == true) && (isLogin == false)){
				isLogin = true;
				logger.info("user is login");
				doAction(request,response,ControllerConst.WELCOME);
			}else{
				//id user is login forward to requested page
				if (isLogin == true){	
					actionPageSelector(request, response , url);
				}	
			}
		}catch (Exception e){
			e.printStackTrace();
			logout(request, response);
		}
	}




	/**
	 * this method run only if user is login
	 * it select action by url
	 * @param request
	 * @param response
	 * @throws ServletException
	 * @throws IOException
	 */
	private void actionPageSelector(HttpServletRequest request, HttpServletResponse response , String url) throws ServletException, IOException {
		logger.info("Get items is active");

		//user objet ref 
		User currentUser = null;
		try{
			//get all items
			currentUser = (User)this.session.getAttribute("user");
			if(url.endsWith(ControllerConst.USER_MENU)){
				doAction(request,response,ControllerConst.USER_MENU);
				//get all user items
			}else if (url.endsWith(ControllerConst.USER_TASKS)){
				getItems(request, response, currentUser.getUserId());
				doAction(request,response,ControllerConst.USER_TASKS);
				//add new task
			}else if (url.endsWith(ControllerConst.ADD_TASK)){
				doAction(request,response,ControllerConst.ADD_TASK);
				logger.info(ControllerConst.ADD_TASK);
				addItem(request,response,currentUser.getUserId());
				//delete task
			}else if (url.endsWith(ControllerConst.DELETE_TASK)){
				doAction(request,response,ControllerConst.DELETE_TASK);
				logger.info(ControllerConst.DELETE_TASK);
				deleteItem(request, response, currentUser.getUserId());
				//edit task
			}else if (url.endsWith(ControllerConst.EDIT_TASK)){
				doAction(request,response,ControllerConst.EDIT_TASK);
				logger.info(ControllerConst.EDIT_TASK);
				editItem(request, response, currentUser.getUserId());
				//log out
			}else if (url.endsWith(ControllerConst.LOG_OUT)){
				logout(request,response);
			}else{
				doAction(request,response,ControllerConst.USER_MENU);
			}
		}catch(Exception e){
			e.printStackTrace();
			logout(request, response);
		}
	}
	/**
	 * this method get all todo list from DB
	 * @param request
	 * @param response
	 * @param userID
	 * @throws ServletException
	 * @throws IOException
	 */
	private void getItems(HttpServletRequest request, HttpServletResponse response ,int userID ) throws ServletException, IOException {
		try {
			//get all todo list item from DB
			items = HibernateToDoListDAO.getInstance().getAllToDoListItem(userID);
			this.session.setAttribute("items",items);

		} catch (ToDoListsPlatformException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}



	/**
	 * this method create new to list item and add it to the DB
	 * @param request
	 * @param response
	 * @param userID
	 * @throws ServletException
	 * @throws IOException
	 */
	private void addItem(HttpServletRequest request, HttpServletResponse response ,int userID ) throws ServletException, IOException {
		///need to check if on line if neccesery**** TODO

		logger.debug("Add item");
		String title = (String) request.getParameter("title");
		String description = (String) request.getParameter("description");
		response.getWriter().println(title + " "+description );
		if(title != null  && description != null ){
			try {
				HibernateToDoListDAO.getInstance().addToDoListItem(new ToDoListItem(title ,description,userID ));
				upDateOnDataChange(userID); //update session on changes
			} catch (ToDoListsPlatformException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

		}
	}


	/**
	 * this method delete exist item by item id
	 * @param request
	 * @param response
	 * @param userID
	 * @throws ServletException
	 * @throws IOException
	 */
	private void deleteItem(HttpServletRequest request, HttpServletResponse response ,int userID ) throws ServletException, IOException {
		String id = (String) request.getParameter("id");	
			if(id != null ){
			try {
			int itemID =Integer.parseInt(id);
			 items = (Collection<ToDoListItem>)session.getAttribute("items");
			for (ToDoListItem toDoListItem : items) {
				if (toDoListItem.getId() == itemID){
				HibernateToDoListDAO.getInstance().deleteToDoListItem(toDoListItem);//delete item
				upDateOnDataChange(userID); //update session on changes
				}
			}
			} catch (ToDoListsPlatformException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}catch (NumberFormatException e){
			//TODO need to decide what to do 				
			}

		}

	}
/**
 * this method edit item by item id 
 * @param request
 * @param response
 * @param userID
 * @throws ServletException
 * @throws IOException
 */
	private void editItem(HttpServletRequest request, HttpServletResponse response ,int userID ) throws ServletException, IOException {
		String id = (String) request.getParameter("id");	
		String title = (String) request.getParameter("title");
		String description = (String) request.getParameter("description");
		boolean isChanged = false; // in case of data change flag is to and then update DB
		ToDoListItem itemToUpdate = null;
		if(id != null && title != null && description != null){
		try {
		int itemID =Integer.parseInt(id);
		 items = (Collection<ToDoListItem>)session.getAttribute("items");
		for (ToDoListItem toDoListItem : items) {
			if (toDoListItem.getId() == itemID){ 
				itemToUpdate = toDoListItem;
				if (!itemToUpdate.getTitle().equals(title)){ // if title is changed 
					itemToUpdate.setTitle(title);
					isChanged = true;
				}
				if (!itemToUpdate.getDescription().equals(description)){ // if description is changed 
					itemToUpdate.setDescription(description);
					isChanged = true;
				}
				//save if item changed
				if (isChanged == true){
					HibernateToDoListDAO.getInstance().updateToDoListItem(itemToUpdate);
					upDateOnDataChange(userID); //update session on changes
				}
				
		
			}
		}
		} catch (ToDoListsPlatformException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}catch (NumberFormatException e){
		//TODO need to decide what to do 				
		}

	}
	}
	

	/**
	 * this method logout current user
	 * @param request
	 * @param response
	 * @throws ServletException
	 * @throws IOException
	 */
	private void logout(HttpServletRequest request, HttpServletResponse response ) throws ServletException, IOException {
		session.invalidate();
		isLogin = false;
		doAction(request, response, ControllerConst.LOG_OUT);
	}



	/**
	 * this method verify if user exist in registered on DB 
	 * @param request
	 * @param response
	 * @return
	 * @throws ServletException
	 * @throws IOException
	 */
	private boolean userAuthentication(HttpServletRequest request, HttpServletResponse response)throws ServletException, IOException {
		User user = null;
		this.session = request.getSession();
		String password =(String) request.getParameter("password");
		String id =(String) request.getParameter("id");
		if(password != null && id !=null){
			password = password.trim();
			id = id.trim();
			try {
				user = AuthenticationDAO.getInstance().signInExistUser(Integer.parseInt(id), password);
				this.session.setAttribute("user", user);
				return true;
			} catch (NumberFormatException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (AuthenticationHandlerException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

			logger.info("user id" + id + " try to login");
		}
		return false;

	}



	/**
	 * get action and execute
	 * @param request
	 * @param response
	 * @param action
	 * @throws ServletException
	 * @throws IOException
	 */
	private void doAction(HttpServletRequest request, HttpServletResponse response , String action) throws ServletException, IOException {
		RequestDispatcher dispatcher = null;
		dispatcher = getServletContext().getRequestDispatcher("/"+action+".jsp");	
		dispatcher.forward(request, response);


	}

	private void upDateOnDataChange(int userId){
		this.session.removeAttribute("items");
		try {
			this.items = HibernateToDoListDAO.getInstance().getAllToDoListItem(userId);
		} catch (ToDoListsPlatformException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		this.session.setAttribute("items", this.items);
	}
	
}
